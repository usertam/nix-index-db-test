name: "Build Databases"
on:
  workflow_dispatch:
  schedule:
    - cron: '40 0 * * *'
jobs:
  update-deps:
    name: Update Dependencies
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.set-matrix.outputs.matrix}}
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Set up github-actions identity
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    - name: Update dependencies and push
      run: |
        nix flake update --commit-lock-file
        git push
    - name: Generate build matrix
      id: set-matrix
      run: |
        JSON='{"include":['
        DELIM=''
        for CHANNEL in "master" "nixpkgs-unstable"; do
          for SYSTEM in "aarch64-darwin" "aarch64-linux" "i686-linux" "x86_64-darwin" "x86_64-linux"; do
            if [ "${SYSTEM#*-}" == "darwin" ]; then
              HOST="macos-latest"
            else
              HOST="ubuntu-latest"
            fi
            JSON+="${DELIM}{\"system\":\"${SYSTEM}\",\"channel\":\"${CHANNEL}\",\"host\":\"${HOST}\"}"
            DELIM=','
          done
        done
        JSON+=']}'
        echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  build:
    name: Build Databases
    needs: update-deps
    strategy:
      matrix: ${{fromJson(needs.update-deps.outputs.matrix)}}
      fail-fast: false
    runs-on: ${{matrix.host}}
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
        extra_nix_config: |
          sandbox = false
          system-features = recursive-nix
          experimental-features = nix-command flakes recursive-nix
        github_access_token: ${{secrets.GITHUB_TOKEN}}
    - name: Set up github-actions identity
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    - name: Build database
      id: build
      continue-on-error: true
      run: nix develop .#${{matrix.system}}.${{matrix.channel}} -c sh -c 'eval "$buildPhase" && eval "$installPhase"'
    - name: Push to ${{matrix.system}}/${{matrix.channel}}
      if: steps.build.outcome == 'success'
      run: |
        git fetch --depth=1 origin ${{matrix.system}}/${{matrix.channel}}:build && ref=refs/heads/build
        git worktree add build ${ref-$(echo | git commit-tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904)}
        cp -a outputs/out/* build
        cd build
        git add .
        git commit -m "$(grep -o '@ [0-9a-z].*' README.md | cut -d\  -f2)" ${ref+--amend}
        git push origin build ${{matrix.system}}/${{matrix.channel}}
